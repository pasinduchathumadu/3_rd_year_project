first 
download the postman
sign in mongodb.com
create database in mongodb compass and connect the server to the mongosh
1.npm init --- package.json and lock.json file generate
2.npm i nodemon  ---- install nodemon 
3.npm i express  ---- install express package
4.npm i mongose  ---- install mongoose 

5.successfully accept the return query --- res.status(200).json({message:------})
6.error message -------     res.status(404).json({message:"not found"})
7.npm i bcryptjs  ---- hashpasswords
8.error message ----------- res.status(400).json({messge:"user all ready exisit"})
9.return console.log(err)   ----- res.status(500).json({message:"-------"})
10.npm i cors


------------- session ---------------
npm install express express-session
const express = require('express');
const session = require('express-session');

const app = express();

// Set up session middleware
app.use(session({
  secret: 'your-secret-key',
  resave: false,
  saveUninitialized: true
}));

// Your routes and other middleware configuration...
app.get('/', (req, res) => {
  req.session.username = 'John'; // Setting a value in the session
  res.send('Session set!');
});
app.get('/profile', (req, res) => {
  const username = req.session.username; // Retrieving the value from the session
  res.send(`Hello, ${username}!`);
});



handle the find method ----------------
 blogs= await Blog.find({}, 'title image -_id');
//excluding id
we can give sone condition into the first parameter


print the value 
console .log(blog[0].columnname)

10.async ---- http request
11.update the particular row using findbyidandupdate
 blog = await Blog.findByIdAndUpdate(blog_id,{
            title,
            description,

        })
12.update error
res.status(500)
13.get error
res.status(404)



------------------ frontend 
1.create frontend folder
npx create-react-app frontend    installing the packages 
2.import axios and cors
npm i axios /   npm i cors
3.app.js is the setup and routing the files 
4.components---- all the html/js files in components
5.npm i react-route-dom



---- session -----
npm install node-localstorage

localstorage.setItem("key","value")
const id = localstorage.getItem("key");

print js varriable in html tag

const name = localstorage.getitem("key")

const id = document.getelementbyid("id")
id.innerHtml = name


get the date ---------

date_joined = new Date();
date_joined.toLocalDatestring()
date_joined.toDateString()


-----------------------------mail -------------------
 let response = {
        body: {
            name: "Happt Tails Pet-Hub",
            intro: "Registration Confimation Code",
            table: {
                data: [
                    {
                        item: "Nodemailer Stack Book",
                        description: "A Backend application",
                        price: "$10.99",
                    }
                ]
            },
            outro: `You are verification code : ${verify_no}`
        }
    }



-------------------------- payment gateway 
In the code example I provided, the `token` refers to a payment method token or a payment method ID. It is a unique identifier representing the payment method details provided by the client.

When using Stripe's API, you can obtain a payment method token or ID by using Stripe.js on the client-side. Stripe.js collects the payment method details securely and returns a token that you can then pass to your server for processing the payment.

Here's an example of how you can collect the payment method details using Stripe.js and include the token in your request to the server:

```javascript
// Client-side code using Stripe.js
const stripe = Stripe('YOUR_STRIPE_PUBLISHABLE_KEY');

// Collect payment method details and create a token
const cardElement = elements.create('card');
cardElement.mount('#card-element');

const paymentForm = document.getElementById('payment-form');
paymentForm.addEventListener('submit', async (event) => {
  event.preventDefault();

  const { paymentMethod, error } = await stripe.createPaymentMethod({
    type: 'card',
    card: cardElement,
  });

  if (error) {
    console.error(error);
  } else {
    // Send the payment method token to your server
    fetch('/payment', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: 1000, currency: 'usd', token: paymentMethod.id }),
    })
      .then((response) => response.json())
      .then((data) => {
        console.log(data);
        // Handle the payment response from the server
      })
      .catch((error) => {
        console.error(error);
      });
  }
});
```

In this example, the payment form is submitted to the server-side route `/payment`, and the `amount`, `currency`, and `token` (payment method ID) are sent as JSON data in the request body.

On the server-side, you can then access the `token` using `req.body.token` to process the payment with the provided payment method details.



--------------------------
const express = require('express');
const app = express();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

// Create a route to handle payment requests
app.post('/payment', async (req, res) => {
  const { amount, currency, token } = req.body;

  try {
    // Create a payment intent using the Stripe API
    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency,
      payment_method_types: ['card'],
      payment_method: token,
    });

    // Return the payment status to the client
    res.json({ status: paymentIntent.status });
  } catch (error) {
    // Handle errors and send an error response
    console.error(error);
    res.status(500).json({ error: 'Payment failed' });
  }
});

// Start the server
app.listen(3000, () => {
  console.log('Server started on port 3000');
});

return res.download('images/client/qrcode.png')


npm install multer --- for this is the middleware for the file upload 
https://www.phpmyadmin.co/


npm install @mui/material @emotion/react @emotion/styled
npm install @mui/icons-material
npm install @mui/icons-metrial/core 

const date = date.tolocaldatestring()
const time = date.tolocaltimestring()
